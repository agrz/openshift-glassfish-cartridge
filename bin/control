#!/bin/bash
set -e

source $OPENSHIFT_CARTRIDGE_SDK_BASH

if ! [ $# -eq 1 ]
then
    echo "Usage: \$0 [start|restart|graceful|graceful-stop|stop|threaddump]"
    exit 1
fi

source ${OPENSHIFT_GLASSFISH_DIR}/bin/util

GLASSFISH_PID_FILE="${OPENSHIFT_GLASSFISH_DIR}/run/glassfish.pid"

# Kill the process given by $1 and its children
killtree() {
    local _pid=$1
    for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
        killtree ${_child}
    done
    echo kill -9 ${_pid}
    kill -9 ${_pid}
}

# Check if the glassfish process is running
isrunning() {
    # Check for running app
    if [ -f "$GLASSFISH_PID_FILE" ]; then
      jbpid=$(cat $GLASSFISH_PID_FILE);
      running=`/bin/ps --no-headers --pid $jbpid`
      if test -n "$running";
      then
        return 0
      fi
    fi
    # not running
    return 1
}

# Check if the server http port is up
function ishttpup() {
    let count=0
    while [ ${count} -lt 24 ]
    do
        if /usr/sbin/lsof -P -n -i "@${OPENSHIFT_GLASSFISH_IP}:${OPENSHIFT_GLASSFISH_HTTP_PORT}" | grep "(LISTEN)" > /dev/null; then
            echo "Found ${OPENSHIFT_GLASSFISH_IP}:${OPENSHIFT_GLASSFISH_HTTP_PORT} listening port"
            return 0
        fi
        let count=${count}+1
        sleep 2
    done
    return 1
}

function start_app() {
    # Check for running app
    if isrunning; then
        echo "Application is already running" 1>&2
    else
        # Start
		echo 'Starting Glassfish Cartridge...' 1>&2
		set -x
		# remove old deployment and redeploy
		rm -r ${OPENSHIFT_GLASSFISH_DIR}/domain1
		mkdir ${OPENSHIFT_GLASSFISH_DIR}/domain1
		cp ${OPENSHIFT_REPO_DIR}/domain1/* ${OPENSHIFT_GLASSFISH_DIR}/domain1
		cd ${OPENSHIFT_GLASSFISH_DIR}/domain1/config/
		mv domain.xml domain.xml_2
		sed "s/$( grep serverName domain.xml_2 | cut -d\" -f 2 )/${OPENSHIFT_GLASSFISH_IP}/g" domain.xml_2 > domain.xml

		${OPENSHIFT_GLASSFISH_DIR}/bin/asadmin start-domain ${OPENSHIFT_GLASSFISH_DIR}/domain1 &>&2
        
        PROCESS_ID=$!
        
        echo $PROCESS_ID > $GLASSFISH_PID_FILE
        if ! ishttpup; then
            echo "Timed out waiting for http listening port"
            exit 1
        fi
    fi
}

function stop_app() {
    if ! isrunning; then
        jbpid=$(cat $GLASSFISH_PID_FILE);
        echo "Application($jbpid) is already stopped" 1>&2
    elif [ -f "$GLASSFISH_PID_FILE" ]; then
	    ${OPENSHIFT_GLASSFISH_DIR}/bin/asadmin stop-domain ${OPENSHIFT_GLASSFISH_DIR}/domain1 &>&2
        pid=$(cat $GLASSFISH_PID_FILE);
        echo "Sending SIGTERM to glassfish:$pid ..." 1>&2
        killtree $pid
    else 
        echo "Failed to locate GLASSFISH PID File" 1>&2
    fi
}

function threaddump() {
    if ! isrunning; then
        echo "Application is stopped"
        exit 1
    elif [ -f "$GLASSFISH_PID_FILE" ]; then
        pid=$(cat $GLASSFISH_PID_FILE);
        java_pid=`ps h --ppid $pid -o '%p'`
        kill -3 $java_pid
        client_result "Success"
        client_result ""
        client_result "The thread dump file will be available via: rhc tail $OPENSHIFT_APP_NAME -f */logs/catalina.out -o '-n 250'"
    else 
        echo "Failed to locate GLASSFISH PID File"
    fi
}

function tidy {
    rm -rf ${OPENSHIFT_GLASSFISH_DIR}/logs/* ${OPENSHIFT_GLASSFISH_DIR}/logs/.[^.]*
    rm -rf ${OPENSHIFT_GLASSFISH_DIR}/tmp/* ${OPENSHIFT_GLASSFISH_DIR}/tmp/.[^.]*
}

case "$1" in
    start)
        start_app
        exit 0
    ;;
    graceful-stop|stop)
        stop_app
        exit 0
    ;;
    restart|graceful)
        stop_app
        start_app
        exit 0
    ;;
    threaddump)
        threaddump
        exit 0
    ;;
    tidy)
        tidy
        exit 0
    ;;
    status)
        if ! isrunning; then
            echo "The application is either stopped or inaccessible"
            exit 0
        fi

        echo tailing "$OPENSHIFT_GLASSFISH_DIR/logs/catalina.out"
        echo "------ Tail of JBoss catalina.out ------"
        tail "$OPENSHIFT_GLASSFISH_DIR/logs/catalina.out"
        exit 0
    ;;
    build)
        ${OPENSHIFT_GLASSFISH_DIR}/bin/build
        exit 0
    ;;
    deploy)
        ${OPENSHIFT_GLASSFISH_DIR}/bin/deploy
        exit 0
    ;;
esac
